@page "/login"
@using Blazorapp.AuthenticationAndAuthorization.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<h3>Login</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>

        <div class="mb-3">
            <label>Username</label>
            <InputText @bind-Value="model.Username" class="form-control" placeholder="Username"/>
        </div>

        <div class="mb-3">
            <label>Password</label>
            <InputText @bind-Value="model.Password" class="form-control" placeholder="Password" />
        </div>

        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    private Model model = new();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUsername(model.Username);

        if(userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid username or password");
            return;
        }
        else
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    Username = userAccount.Username,
                    Role = userAccount.Role
                });

            navManager.NavigateTo("/", true);
        }
    }
}
